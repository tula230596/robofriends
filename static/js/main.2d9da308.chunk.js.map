{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/searchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","containers/App.js","misc/serviceWorker.js","index.js"],"names":["Card","props","name","email","className","alt","src","CardList","robots","cardComponent","map","user","i","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAmBeA,EAfJ,SAACC,GAAQ,IAEbC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,MACZ,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,mBACpB,6BACC,gCAAMA,EAAN,KACA,+BAAKC,EAAL,QCeWI,EAxBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEVC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GAEpC,OAAQ,kBAAC,EAAD,CACNC,IAAKD,EACLE,GAAIN,EAAOI,GAAGE,GACdZ,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAGpB,OAEA,6BACEM,ICDYM,EAdC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKZ,UAAU,OACf,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEGI,G,MATF,SAACnB,GACb,OACC,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UACjEvB,EAAMwB,YCkBKC,E,kDApBd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,UAAU,GAHC,E,8DAOKC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OAAGG,KAAKJ,MAAMC,SACN,kDAEDG,KAAK9B,MAAMwB,a,GAjBQQ,aC4DbC,E,kDApDd,aAAc,IAAD,8BACZ,gBAiBDC,eAAe,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAhBxC,EAAKZ,MAAM,CACVnB,OAAQ,GACR6B,YAAY,IALD,E,gEASO,IAAD,OAClBG,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACxB,OAAOoC,S,+BAW5B,IAAD,OAEDC,EAAYd,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAC,GAC3C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAGhE,OAA8B,IAA3BjB,KAAKJ,MAAMnB,OAAO0C,OACd,uCAIP,yBAAK9C,UAAU,MACf,wBAAIA,UAAU,0BAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAE9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQqC,W,GAzCJZ,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCANC,IAASC,OACR,kBAAC,EAAD,MAECC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.2d9da308.chunk.js","sourcesContent":["import React from 'react';\n\n// building the function of card component\n\nconst Card=(props)=>{\n\t// destructuring the object props (properties)\n\tconst{name, email}=props;\n\treturn(\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${name}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p> {email} </p>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList=({robots})=>{\n\t\n\tconst cardComponent=robots.map((user,i)=>{\n\t\t// whenever use loop, add key property so that the React can keep track of elements\n\t\treturn( <Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}/>\n\t\t\t);\n\t})\n\treturn(\n\n\t<div >\n\t\t{cardComponent}\n\t</div>\n\n\n\n\n\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchChange})=>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input \n\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\ttype='search' \n\t\tplaceholder='search Robots' \n\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll=(props)=>{\n\treturn(\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black', height:'500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError:true})\n\t}\n\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> This is not good </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../Components/CardList.js';\n// import {robots} from './robots.js';\nimport SearchBox from'../Components/searchBox.js';\nimport './App.css';\nimport Scroll from '../Components/Scroll.js';\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\t// this is what can be changed, lives in App parent\n\t\tthis.state={\n\t\t\trobots: [],\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('http://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(users=> this.setState({robots:users}));\n\t}\n\n\n\n\t// whenever u make ur own function, use arrow syntax\n\tonSearchChange=(event)=>{\n\tthis.setState({searchfield: event.target.value})\t\n\t\n\t}\n\n\trender(){\n\n\t\tconst filterRobot=this.state.robots.filter(robot=>{\n\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\n\t\tif(this.state.robots.length===0){\n\t\t\treturn<h1>Loading</h1>\n\t\t}else{\n\n\t\treturn(\n\t\t<div className='tc'>\n\t\t<h1 className='f1 lh-title dark-green'>RoboFriends</h1>\n\t\t<SearchBox searchChange={this.onSearchChange} />\n\n\t\t<Scroll>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<CardList robots={filterRobot}/>\n\t\t\t</ErrorBoundary>\t\n\t\t</Scroll>\n\n\t\t</div>\n\n\t\t);\n\t\t}\n\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n// React includes webpack that does the bundling for us\n// thats why we can use the \"import\" codes\n// if not, have to use browerify, require\nimport React from 'react';\n// React can be used for mobile, web, many things. ReactDOM is for the web, DOM\nimport ReactDOM from 'react-dom'; \nimport './index.css';\n// import Card from './Card.js';\n// make a parent CardList for Card so that dont have to copy all 10\nimport App from './containers/App.js'\nimport * as serviceWorker from './misc/serviceWorker';\n// import tachyons for style\nimport 'tachyons';\n//  import robot names, have to destructure {} because export is not default in the file\n\n\n\nReactDOM.render(\n\t<App/>\n\n\t,document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}